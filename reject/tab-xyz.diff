# HG changeset patch
# Parent 92c9748e0ccbc42a5e28ce8fb9b8818e756a06da
diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -4663,11 +4663,14 @@
 			omitted, there is no extra character at the end of the
 			line.
 	  						*lcs-tab*
-	  tab:xy	Two characters to be used to show a tab.  The first
-			char is used once.  The second char is repeated to
-			fill the space that the tab normally occupies.
+	  tab:xyz	Two or three characters to be used to show a tab.  The
+			first char is used once.  The second char is repeated
+			to fill the space that the tab normally occupies. the
+			third char is optional, if given, it will used once at
+			last of tab.
 			"tab:>-" will show a tab that takes four spaces as
-			">---".  When omitted, a tab is show as ^I.
+			">---".  "tab:<->" will show a tab as "<-->".  When
+			omitted, a tab is show as ^I.
 	  						*lcs-trail*
 	  trail:c	Character to show for trailing spaces.  When omitted,
 			trailing spaces are blank.
diff --git a/src/globals.h b/src/globals.h
--- a/src/globals.h
+++ b/src/globals.h
@@ -1160,6 +1160,7 @@
 EXTERN int	lcs_nbsp INIT(= NUL);
 EXTERN int	lcs_tab1 INIT(= NUL);
 EXTERN int	lcs_tab2 INIT(= NUL);
+EXTERN int	lcs_tab3 INIT(= NUL);
 EXTERN int	lcs_trail INIT(= NUL);
 #ifdef FEAT_CONCEAL
 EXTERN int	lcs_conceal INIT(= '-');
diff --git a/src/message.c b/src/message.c
--- a/src/message.c
+++ b/src/message.c
@@ -1646,6 +1646,7 @@
     int		col = 0;
     int		n_extra = 0;
     int		c_extra = 0;
+    int		c_end = 0;
     char_u	*p_extra = NULL;	    /* init to make SASC shut up */
     int		n;
     int		attr = 0;
@@ -1676,8 +1677,13 @@
 	if (n_extra > 0)
 	{
 	    --n_extra;
-	    if (c_extra)
+	    if (n_extra > 0 && c_extra)
 		c = c_extra;
+	    else if (n_extra == 0 && c_end)
+	    {
+		c = c_end;
+		c_end = 0;
+	    }
 	    else
 		c = *p_extra++;
 	}
@@ -1712,11 +1718,13 @@
 		{
 		    c = ' ';
 		    c_extra = ' ';
+		    c_end = ' ';
 		}
 		else
 		{
 		    c = lcs_tab1;
 		    c_extra = lcs_tab2;
+		    c_end = lcs_tab3;
 		    attr = hl_attr(HLF_8);
 		}
 	    }
diff --git a/src/option.c b/src/option.c
--- a/src/option.c
+++ b/src/option.c
@@ -7238,7 +7238,7 @@
 {
     int		round, i, len, entries;
     char_u	*p, *s;
-    int		c1, c2 = 0;
+    int		c1, c2 = 0, c3 = 0;
     struct charstab
     {
 	int	*cp;
@@ -7331,6 +7331,16 @@
 #else
 			c2 = *s++;
 #endif
+			if (!(*s == ',' || *s == NUL))
+			{
+#ifdef FEAT_MBYTE
+			    c3 = mb_ptr2char_adv(&s);
+			    if (mb_char2cells(c2) > 1)
+				continue;
+#else
+			    c3 = *s++;
+#endif
+			}
 		    }
 		    if (*s == ',' || *s == NUL)
 		    {
@@ -7340,6 +7350,7 @@
 			    {
 				lcs_tab1 = c1;
 				lcs_tab2 = c2;
+				lcs_tab3 = c3;
 			    }
 			    else if (tab[i].cp != NULL)
 				*(tab[i].cp) = c1;
diff --git a/src/screen.c b/src/screen.c
--- a/src/screen.c
+++ b/src/screen.c
@@ -2854,6 +2854,7 @@
     int		n_extra = 0;		/* number of extra chars */
     char_u	*p_extra = NULL;	/* string of extra chars, plus NUL */
     int		c_extra = NUL;		/* extra chars, all the same */
+    int		c_end = NUL;		/* end char, for tab char */
     int		extra_attr = 0;		/* attributes when n_extra != 0 */
     static char_u *at_end_str = (char_u *)""; /* used for p_extra when
 					   displaying lcs_eol at end-of-line */
@@ -3950,9 +3951,15 @@
 	 */
 	if (n_extra > 0)
 	{
-	    if (c_extra != NUL)
-	    {
-		c = c_extra;
+	    if (c_extra != NUL || (n_extra == 1 && c_end != NUL))
+	    {
+		if (n_extra == 1 && c_end != NUL)
+		{
+		    c = c_end;
+		    c_end = NUL;
+		}
+		else
+		    c = c_extra;
 #ifdef FEAT_MBYTE
 		mb_c = c;	/* doesn't handle non-utf-8 multi-byte! */
 		if (enc_utf8 && (*mb_char2len)(c) > 1)
@@ -4477,6 +4484,7 @@
 		    {
 			c = lcs_tab1;
 			c_extra = lcs_tab2;
+			c_end = lcs_tab3;
 			n_attr = n_extra + 1;
 			extra_attr = hl_attr(HLF_8);
 			saved_attr2 = char_attr; /* save current attr */
@@ -4493,6 +4501,7 @@
 		    else
 		    {
 			c_extra = ' ';
+			c_end = ' ';
 			c = ' ';
 		    }
 		}
